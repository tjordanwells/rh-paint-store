{"version":3,"sources":["components/partial/Pantone/Pantone.js","api/paintAPI.js","components/page/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","card","minWidth","margin","title","fontSize","fontWeight","textAlign","height","marginBottom","marginTop","Pantone","props","classes","react_default","a","createElement","Card","className","CardContent","style","backgroundColor","concat","color","Typography","name","paintAPI","getAllColors","axios","get","getVendorColors","vendorId","getAllVendors","Main","state","vendors","colors","currentVendor","currentVendorName","currentVendorId","loading","handleVendorChange","_this","setState","id","API","then","res","data","catch","err","console","log","_this2","this","root","react_select_browser_esm","select","onChange","options","placeholder","getOptionLabel","option","getOptionValue","value","isSearchable","Button","onClick","button","Divider","variant","pantoneContainer","CircularProgress","map","hex","Component","withStyles","theme","flexGrow","width","spacing","unit","justifyContent","display","marginLeft","marginRight","flexWrap","App","page_Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8410a470.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 275,\n    margin: 40\n  },\n  title: {\n    fontSize: 22,\n    fontWeight: \"bolder\",\n    textAlign: \"center\",\n    height: 40,\n    marginBottom: 6,\n    marginTop: 8\n  }\n});\n\nexport default function Pantone(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <CardContent\n        style={{ height: \"260px\", backgroundColor: `#${props.color}` }}\n      />\n      <CardContent>\n        <Typography className={classes.title}>{props.name}</Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import axios from \"axios\";\n\nexport default {\n  getAllColors: () => {\n    return axios.get(`/paint-store`);\n  },\n  getVendorColors: vendorId => {\n    return axios.get(`/paint-store/vendor/colors/${vendorId}`);\n  },\n  getAllVendors: () => {\n    return axios.get(`/paint-store/vendors`);\n  }\n};\n","import React, { Component } from \"react\";\nimport { Divider, Button, CircularProgress } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Select from \"react-select\";\n\nimport Pantone from \"../../partial/Pantone\";\nimport API from \"../../../api/paintAPI\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    marginBottom: 150\n  },\n  select: {\n    width: 400,\n    marginTop: theme.spacing.unit * 4,\n    marginBottom: theme.spacing.unit * 4,\n    justifyContent: \"center\",\n    display: \"block\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n  },\n  button: {\n    margin: theme.spacing(1),\n    justifyContent: \"center\",\n    display: \"block\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n  },\n  pantoneContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    minWidth: 300,\n    width: \"80%\",\n    justifyContent: \"center\",\n    marginTop: theme.spacing.unit * 4,\n    marginLeft: theme.spacing.unit * 20\n  }\n});\n\nclass Main extends Component {\n  state = {\n    vendors: [],\n    colors: [],\n    currentVendor: null,\n    currentVendorName: null,\n    currentVendorId: null,\n    loading: false\n  };\n\n  handleVendorChange = currentVendor => {\n    this.setState(\n      {\n        currentVendor: currentVendor,\n        currentVendorName: currentVendor.name,\n        currentVendorId: currentVendor.id,\n        loading: true\n      },\n      () => {\n        if (this.state.currentVendor) {\n          API.getVendorColors(this.state.currentVendorId)\n            .then(res => {\n              this.setState({\n                colors: res.data,\n                loading: false\n              });\n            })\n            .catch(err => console.log(err));\n        }\n      }\n    );\n  };\n\n  getAllColors = () => {\n    this.setState(\n      {\n        loading: true\n      },\n      () => {\n        API.getAllColors()\n          .then(res => {\n            this.setState({\n              colors: res.data,\n              loading: false\n            });\n            console.log(this.state.loading);\n          })\n          .catch(err => console.log(err));\n      }\n    );\n  };\n\n  componentDidMount() {\n    API.getAllVendors()\n      .then(res => {\n        this.setState({\n          vendors: res.data\n        });\n      })\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.root}>\n        <Select\n          className={classes.select}\n          onChange={this.handleVendorChange}\n          options={this.state.vendors}\n          placeholder=\"Select Vendor\"\n          getOptionLabel={option => option.name}\n          getOptionValue={option => option.id}\n          value={this.state.currentVendor}\n          isSearchable\n        />\n        <Button\n          color=\"primary\"\n          onClick={this.getAllColors}\n          className={classes.button}\n        >\n          Display Colors From All Vendors\n        </Button>\n        <Divider variant=\"middle\" />\n        <div className={classes.pantoneContainer}>\n          {this.state.loading === true ? (\n            <CircularProgress />\n          ) : (\n            this.state.colors.map(color => {\n              return <Pantone name={color.name} color={color.hex} />;\n            })\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Main);\n","import React from \"react\";\nimport Main from \"./components/page/Main\";\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}